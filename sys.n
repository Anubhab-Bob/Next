
class sys {

    priv:
        static native fn loadLibrary0(n)

    pub:
        static fn loadLibrary(name) {
            loadLibrary0(name)
        }
}

class range {
    priv:
        from, to, step
    pub:
        new(f, t, s) {
            from = f
            to = t
            step = s
        }

        fn next() {
            if(from != to) {
                from += step
            }
            ret from
        }
}

// Mirrors a native array
class list {
    priv:
        elements
        native fn arr_new0(size)
        native fn arr_at0(arr, idx)
        native fn arr_assign0(arr, idx, val)
        native fn arr_length0(arr)

    pub:
        static {
            sys.loadLibrary("nextarr.so")
        }
        new(s) {
            elements = arr_new0(s)
        }

        len() {
            ret arr_length0(elements)
        }

        op [](x) { // element access -> x = list[i]
            ret arr_at0(elements, x)
        }

        op [](x, val) { // element assign -> list[i] = x
            ret arr_assign0(elements, idx, val)
        }
}

// all members are static
static class io {
    
    priv:
        native fn print0(x)
        native fn readline0()
        native fn read0()
        native fn readString0()

    pub:
        static { // executed when the class is loaded to the vm
            sys.loadLibrary("nextio.so")
        }

        fn print(expr...) {
            for(exp in expr) {
                print0(exp)
            }
            // it will be desugared like 
            // num = expr.len()
            // for(i = 0;i < num;i++) {
            //      exp = expr[i]
            //      print0(exp)
            // }
        }

        fn readline() {
            ret readline0()
        }

        fn read() {
            ret read0()
        }

        fn readString() {
            ret readString0()
        }

        op <<(x) {
            print(x)
            ret this
        }
}
