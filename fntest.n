import something

fn mightThrowAnException() {
    throw AnException("A sample exception!")
}

pub fn cool(a, b) {
    c = cool(3, 4)
    if(i < j) {
        print("Hello world!")
    }
    try {
        mightThrowAnException()
    } catch(SomeType s) {

    }
}

class sys {
    priv:
        aMember, anotherMember

        static aStaticMember

        new() {
            // empty constructor
            print("Hello, Nil!")
        }

        new(a, b, c){
            if(a < b) {
                aMember = a
            } else if(someThing) {
                aMember = c
            } else {
                prin("Hello!")
            }
        }
    pub:
        new(a, b, c, d) {
            sys(a, b, c, 0)
        }

        static fn aStaticFn() {

        }

        fn nonStaticFn() {

        }

        fn native nsNativeFn()

        static fn native sNativeFn()

        static {}
}
