class Exception is error {
    pub:
        new(x) {
           super(x)
        }
}

fn badfn(x) {
    if(x < 4) {
        throw 2
    } else {
        throw Exception("This is an exception")
    }
}

fn recur(x) {
    if(x < 100) {
        recur(x + 1)
    } else {
        throw Exception("Too many recurs")
    }
}

pub fn test() {
    res = true
    try {
        badfn(4)
        print("[Error] badfn should've really thrown an exception now!\n")
        res = false
    } catch(number n) {
        print("[Error] Expected exception of class 'Exception', caught 'Number'! \n")
        res = false
    } catch(string s) {
        print("[Error] Expected exception of class 'Exception', caught 'String'! \n")
        res = false
    } catch(Exception e) {
        if(e.str() != "This is an exception") {
            print("[Error] Expected exception message 'This is an exception'!\nReceived '", e.str(), "'!\n")
            res = false
        }
    }
    try {
        recur(50)
        print("[Error] recur() should've really thrown an exception now!\n")
        res = false
    } catch(Exception f) {
        if(f.str() != "Too many recurs") {
            print("[Error] Expected exception message 'Too many recurs'!\nReceived '", f.str(), "'!\n")
            res = false
        }
    }

    try {
        throw Exception("Should have caught by type 'error!'")
    } catch(error e) {
        if(e.str() != "Should have caught by type 'error!'") {
            println("[Error] Expected exception message 'Should have caught by type 'error!'!\nReceived '",
                    e.str(), "'!")
        }
    } catch(Exception e) {
        println("[Error] The exception should have caught by the catch(error e) block!")
        res = false
    }

    ret res
}
