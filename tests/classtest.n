pub class LinkedList {
    pub:
        mem
        static mem2
        new(x) {
            mem = x
            mem2 = 8
        }

        fn test() {
            ret mem * 2
        }

        fn some() {
            a = 2 + 3
            mem = 4
            mem = test()
            ret mem
        }

        fn loop(x) {
            while(mem++ < x) {}
        }

        fn testthis(mem, mem2) {
            this.mem = mem * 2
            this.mem2 = mem2 * 2
            ret (this.mem, this.mem2)
        }
}

pub fn test() {
    res = true
    x = LinkedList(2)
    if(x.mem != 2 or x.mem2 != 8) {
        print("[Error] Constructors are not working!\n")
        res = false
    }
    x.mem = 5
    if(x.mem != 5) {
        print("[Error] Member set not working!\n")
        res = false
    }
    temp = x.some()
    if(temp != 8) {
        print("[Error] Method call not working!\n")
        res = false
    }
    x.mem2 = x.some()
    if(temp != 8) {
        print("[Error] Member set not working!\n")
        res = false
    }
    x.mem = 1
    x.loop(10)
    if(x.mem != 11) {
        print("[Error] Loop failed!\n")
        res = false
    }
    if(x.mem++ != 11) {
        print("[Error] Member post increment not working!\n")
        res = false
    }
    if(++x.mem != 13) {
        print("[Error] Member pre increment not working!\n")
        res = false
    }
    if(x.mem2++ != 8) {
        print("[Error] Static member post increment not working!\n")
        res = false
    }
    if(++x.mem2 != 10) {
        print("[Error] Static member pre increment not working!\n")
        res = false
    }
    x.mem = LinkedList(3)
    temp = x.mem.some()
    
    if(temp != 8) {
        print("[Error] x.mem = LinkedList(3) failed!\n")
        res = false
    }

    thisres = LinkedList(0).testthis(2, 3)
    if(thisres[0] != 4 or thisres[1] != 6) {
        print("[Error] this expressions are not working!")
        res = false
    }
    ret res
}
