fn oniterator(arr, size) {
    for(i in range(size)) {
        arr[i] = i + 1
    }

    sum = 0
    for(i in arr) {
        sum = sum + i
    }
}

fn onindex(arr, size) {
    if(arr.size() != size) {
        for(i in range(size)) {
            arr[i] = i + 1
        }
    } else {
        for(i = 0; i < size; ++i) {
            arr[i] = i + 1
        }
    }
    sum = 0
    for(i = 0; i < size; ++i){
        sum = sum + arr[i]
    }
}

fn measure(str, func, arr, size) {
    println(str)
    start = clock()
    func(arr, size)
    end = (clock() - start)/clocks_per_sec
    println("Elapsed: ", end)
    gc()
}

fn test() {
    size = 100000000
    measure("Array: Iterator", oniterator@2, [], size)
    measure("Tuple: Iterator", oniterator@2, tuple(size), size)
    measure("Array (Fixed Size): Iterator", oniterator@2, array(size), size)
    measure("Tuple: Index Access", onindex@2, tuple(size), size)
    measure("Array: Index Access", onindex@2, [], size)
    measure("Array (Fixed Size): Index Access", onindex@2, array(size), size)
}
test()
