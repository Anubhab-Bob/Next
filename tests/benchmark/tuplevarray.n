fn oniterator(arr, size) {
    for(i in range(size)) {
        arr[i] = i + 1
    }

    sum = 0
    for(i in arr) {
        sum = sum + i
    }
}

fn onindex(arr, size) {
    for(i in range(size)) {
        arr[i] = i + 1
    }
    i = 0
    sum = 0
    while(i < size) {
        sum = sum + arr[i++]
    }
}

class CollectionAssign {
    priv:
        t
    pub:
        sum
        new(x) {
            t = x
            sum = 0
        }

        fn assignfn(idx, val) {
            t[idx] =  idx + 1
        }

        fn sumfn(idx, val) {
            sum = sum + val
        }
}

fn oneach(arr, size) {
    t = CollectionAssign(arr)
    if(type_of(arr) == "array" and arr.size() == 0) {
        for(i in range(size)) {
            arr[i] = i + 1
        }
    } else {
        arr.each(t.assignfn@2)
    }
    arr.each(t.sumfn@2)
}

fn combo(collections, methods, size) {
    for(i in collections.keys()) {
        col = collections[i]
        for(j in methods.keys()) {
            m = methods[j]
            print(i, ": ", j, "\n")
            start = clock()
            m(col, size)
            end = (clock() - start)/clocks_per_sec
            print("Elapsed: ", end, "\n")
        }
    }
}

fn test() {
    size = 100000000
    collections = {"Array": [],
                    "Array (Fixed Size)": array(size),
                    "Tuple": tuple(size)}
    methods = {"Iterator": oniterator@2, "Index": onindex@2, "Each": oneach@2}
    combo(collections, methods, size)
}
test()
