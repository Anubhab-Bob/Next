fn evalA(i, j) { ret ((i+j)*(i+j+1)/2 + i + 1) }

fn times(v, u) {
    us = u.size()
    vs = v.size()
    for(i in range(vs)) {
        t = 0
        for(j in range(us)) {
            t = t + u[j] / evalA(i, j)
        }
        v[i] = t
    }
}

fn timestransp(v, u) {
    us = u.size()
    vs = v.size()
    for(i in range(vs)) {
        t = 0
        for(j in range(us)) {
            t = t + u[j] / evalA(j, i) 
        }
        v[i] = t
    }
}

fn atimestransp(v, u) {
    t = tuple(u.size())
    times(t, u)
    timestransp(v, t)
}

fn main() {
    n = 500
    t = clock()
    u = tuple(n)
    for(i in range(n)) {
        u[i] = 1
    }
    v = tuple(n)
    for(i in range(10)) {
        atimestransp(v, u)
        atimestransp(u, v)
    }

    vBv = 0
    vv = 0
    for(i in range(n)) {
        vi = v[i]
        vBv = vBv + u[i] * vi
        vv = vv + vi * vi
    }
    res = vBv/vv
    t = (clock() - t) / clocks_per_sec
    println(fmt("{:.9f}", res))
    print("elapsed: ", t)
}

main()
