res = true

class Object {
    pub:
        val
        new(v) {
            val = v
        }

        fn hash() {
            ret val - 10
        }
}

class ObjectWrapper {
    pub:
        obj
        new(x) {
            obj = x
        }

        fn hash() {
            ret obj
        }
}

fn expect(map, idx, val) {
    if(map[idx] != val) {
        print("[Error] Expected map[", idx, "] to be '", val, "', received '", map[idx], "'!\n")
        res = false
    }
}

pub fn test() {
    map_ = {"Hello" : "World!",
            29932.3290012 : 2909023,
            ObjectWrapper(Object(10)) : "Stored!",
            true : "False!"}

    expect(map_, "Hello", "World!")
    expect(map_, 29932.3290012, 2909023)
    expect(map_, 1, nil)
    expect(map_, 0, "Stored!")
    expect(map_, true, "False!")

    if(map_.size() != 4) {
        print("[Error] Map size expected to be 4!\n")
        res = false
    }

    k = map_.keys()
    v = map_.values()

    i = 0
    while(i < k.size()) {
        if(map_[k[i]] != v[i]) {
            print("[Error] '", map_[k[i]], "' expected to be '", v[i], "'!")
            res = false
        }
        i++
    }

    ret res
}
